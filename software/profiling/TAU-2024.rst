.. _tau_2024:

************************************
Tuning and Analysis Utilities (TAU)
************************************

TAU is a portable profiling and tracing toolkit for the performance analysis of
parallel programs written in C, C++, Fortran and other languages. The
instrumentation of programs can be done by binary code rewriting, manual
compiler directives, or automatic source code transformation. TAU can support
many parallel programming interfaces, including MPI, OpenMP, pthreads, and ROCm.
TAU includes `paraprof` which is a profile visualization tool, and generated
traces can be displayed by the Vampir, Paraver or JumpShot (included)
visualization tools.

* TAU Home: https://www.cs.uoregon.edu/research/tau/home.php  
* TAU Docs: https://www.cs.uoregon.edu/research/tau/docs.phpx


Enabling TAU
============

On many OLCF systems TAU is available as a module.  Note: since TAU can work by
preloading and intercepting function calls, it is incompatible with other
software that works in a similar way (e.g. darshan-runtime).  

.. code-block:: bash

  module unload darshan-runtime  # incompatible with TAU
  module load tau
  env | grep TAU                 # display TAU settings

The TAU environment variables show the location of the TAU installation and the
default TAU_MAKEFILE.  The TAU compiler wrappers use the TAU_MAKEFILE for
capabilities to be supported while compiling code.


Run using tau_exec
===================

The simplest way to profile with TAU is to prepend ``tau_exec`` to an
executable.  There is no need to recompile code with this approach.  The
``tau_exec`` preloads a library that adds instrumentation to specific library
functions at runtime.  This method uses uses statistical sampling to estimate
time spent in functions (depending on how TAU is configured, libraries can
include MPI, OpenMP, and pthreads).  Note, using ``tau_exec`` does not profile
user-defined code, so its functionality may be limited.

.. code:: bash
  
  module unload darshan-runtime  # incompatible with TAU
  module load tau

  # Copy from the TAU installation
  rsync -va $OLCF_TAU_ROOT/examples/taututorial ./taututorial
  cd ./taututorial

  # This tutorial is a Pi calculation with MPI support.
  # Use CC (C++) to compile (Note: not using TAU wrappers)
  # Use the -include flag to add missing headers (if needed)
  CC computePi.cpp -o computePi --include "climits"

Profiling the execution
-----------------------

The ``tau_exec`` tool will profile the code by default, tracking the time spent
in various parts of the code.

.. code:: bash

  # Make output directory (default is the current dir)
  mkdir profiledir 
  export PROFILEDIR=profiledir

  # Allocate 1 node and run 2 tasks, collect profile (default)
  srun -A <ACCOUNT> -N 1 -t 5 -n 2 tau_exec ./computePi

  # Other tau_exec options
  # tau_exec -ebs             # event-based-sampling
  # tau_exec -T serial,rocm   # -T <option> tau options

  # The run the Paraprof profiler (included with TAU)
  pprof ./profiledir      # command line view
  paraprof ./profiledir   # graphical, requires X-forwarding/X-display
  # Note: Oct 2024 for Mac XQuartx use 'paraprof -fix-xquartz'

This textual output generated by ``pprof`` shows the time profile of the
execution.

.. image:: /images/tau_new/tau_computepi_pprof.png
   :align: center
   :alt:  TAU pprof output
   :scale: 45%
   
The profile can be viewed using the graphical ``paraprof`` tool, which can also
produce a number of other views of the execution.  See XXXXXXXXXXXXXXXXXX for
more information and examples.

.. image:: /images/tau_new/tau_computepi_paraprof.png
   :align: center
   :alt:  TAU pprof output
   :scale: 45%


Tracing the execution
---------------------

This example displays the generated trace using the included Jumpshot trace
visualization tool.  TAU can also create traces for Chrome/Pefetto (json) and
for Vampir (otf2) visualization.  See XXXXXXXXXXXXXXXXXX for more information
abut tracing.

.. code:: bash

  # Make output directory (default is the current dir)
  mkdir tracedir 
  export TRACEDIR=tracedir

  # Allocate 1 node and run 2 tasks, collect trace
  export TAU_TRACE=1 TAU_PROFILE=0 
  srun -A <ACCOUNT> -N 1 -t 5 -n 2 tau_exec ./computePi

  # Post process trace files
  cd ${TRACEDIR} 
  rm -f tau.trc tau.edf         # remove old files
  tau_treemerge.pl              # merge traces for tau
  tau2slog2 tau.trc tau.edf -o yourprogram.slog2 
  # Launch the (included) trace viewer (requires X-forwarding)
  # The trace can be scp'ed to your local machine to avoid X-forwarding
  jumpshot yourprogram.slog2

The Jumpshot trace view here is restricted to the most time consuming functions,
and it can be clearly seen how the MPI_Recv is waiting in the two processes.

.. image:: /images/tau_new/tau_computepi_trace_jumpshot.png
   :align: center
   :alt:  TAU tracing using jumpshot
   :scale: 35%


Automatic source instrumentation using TAU compiler wrappers
------------------------------------------------------------

TAU compiler wrapper scripts (`tau_cc.sh`, `tau_cxx.sh`, `tau_f90.sh`) can be
used to build code, automatically adding timer start/stop calls into a copy of
the code (this does not change the original code).  The Program Database Toolkit
(PDT) is used to parse the source code and add instrumentation.  A selective
filter file can be used to reduce overhead and specify areas for
instrumentation.

- For C: use the TAU wrapper ``tau_cc.sh``
- For C++: use the TAU wrapper ``tau_cxx.sh``
- For Fortran: use the TAU wrapper ``tau_f90.sh`` / ``tau_f77.sh``

.. code:: bash

  module unload darshan-runtime  # incompatible with TAU
  module load tau
  # Copy from the TAU installation
  rsync -va $OLCF_TAU_ROOT/examples/taututorial ./taututorial
  cd ./taututorial

  # See the current/default TAU support
  echo $TAU_MAKEFILE 
  # To change the TAU support, use other Makefiles
  # setenv TAU_MAKEFILE $OLCF_TAU_ROOT/lib/Makefile<other-support>

  # Use TAU wrappers to compile
  # Use the -include flag to add missing headers (if needed)
  tau_cxx.sh computePi.cpp -o computePi -include "climits"

  # To keep intermediate files, turn on the verbose mode and use a selective
  # instrumentation file select.tau, set TAU_OPTIONS
  # setenv TAU_OPTIONS  '-optKeepFiles -optVerbose -optTauSelectFile="select.tau"'

Profiling and tracing for this execution follow the earlier example.

.. code:: bash

  # Make output directories
  mkdir profiledir tracedir 
  export PROFILEDIR=profiledir TRACEDIR=tracedir

  # Collect profile, trace in the same run
  export TAU_TRACE=1 TAU_PROFILE=1

  # Allocate 1 node and run 2 task
  # Note: This is not using tau_exec
  srun -A <ACCOUNT> -N 1 -t 5 -n 2 ./computePi

  # View profile using command line pprof
  pprof   # Used the PROFILEDIR to find data

  # View trace using Jumpshot
  cd ${TRACEDIR}
  tau_treemerge.pl
  tau2slog2 tau.trc tau.edf -o yourprogram.slog2 
  # Launch the (included) trace viewer (requires X-forwarding)
  jumpshot yourprogram.slog2




Manual source instrumentation
------------------------------

TAU provides a rich set of functions that can be used to instrument code at very
specific locations. The TAU documentation gives a list of all the functions
available to instrument your code.
www.cs.uoregon.edu/research/tau/docs/newguide/bk03rn01.html 


Running on the batch systems
============================

Profile viewing with pprof, Paraprof

Trace viewing with JumpShot, Vampir, Chrome/Viewers




Example
=======


References
==========

Some previous TAU training on the OLCF Training archive
https://docs.olcf.ornl.gov/training/training_archive.html

.. csv-table::
   :header: "Date", "Title", "Speaker", "Event", "Presentation"
   :widths: 12 22 22 22 22

      "2020-07-28", "TAU Performance Analysis", "Sameer Shende", `TAU Performance Analysis <https://www.olcf.ornl.gov/calendar/tau-performance-analysis-training/>`__, (`slides <https://www.olcf.ornl.gov/wp-content/uploads/2020/02/tau_ornl20.pdf>`__ | `recording <https://vimeo.com/442482720>`__)
      "2019-08-08", "Performance Analysis with Tau", "George Makomanolis (OLCF)", `Profiling Tools Workshop <https://www.olcf.ornl.gov/calendar/profiling-tools-workshop/>`__, (`slides <https://www.olcf.ornl.gov/wp-content/uploads/2019/08/profiling_tools_tau_day_2.pdf>`__ | `recording <https://vimeo.com/428143973>`__)
      "2019-08-07", "Intro to Tau", "George Makomanolis (OLCF)", `Profiling Tools Workshop <https://www.olcf.ornl.gov/calendar/profiling-tools-workshop/>`__, (`slides <https://www.olcf.ornl.gov/wp-content/uploads/2019/08/3_tau_day_1.pdf>`__ | `recording <https://vimeo.com/427531006>`__)






In this section, some approaches for profiling and tracing will be presented. In
most cases, we need to use wrappers to recompile the application:

- For C: use the TAU wrapper ``tau_cc.sh``
- For C++: use the TAU wrapper ``tau_cxx.sh``
- For Fortran: use the TAU wrapper ``tau_f90.sh`` / ``tau_f77.sh``

Even if you don't compile your application with a TAU wrapper, you can
profile some basic functionalities with ``tau_exec``, for example:

.. code::

	jsrun -n 4 –r 4 –a 1 –c 1 tau_exec -T mpi ./test

The above command profiles MPI for the binary ``test``, which was not compiled
with the TAU wrapper.


Run-Time Environment Variables
==============================

The following TAU environment variables may be useful in job submission scripts.

+------------------------+---------+-------------------------------------------------------------------------------------------------------------+
| Variable  	         | Default | Description			     									 |
+========================+=========+=============================================================================================================+
| TAU_TRACE	         |    0    | Setting to 1 turns on tracing       									 |
+------------------------+---------+-------------------------------------------------------------------------------------------------------------+
| TAU_CALLPATH           |    0    | Setting to 1 turns on callpath profiling							                 |
+------------------------+---------+-------------------------------------------------------------------------------------------------------------+
| TAU_TRACK_MEMORY_LEAKS |    0    | Setting to 1 turns on leak detection									 |
+------------------------+---------+-------------------------------------------------------------------------------------------------------------+
| TAU_TRACK_HEAP         |    0    | Setting to 1 turns on heap memory routine entry/exit							 |
+------------------------+---------+-------------------------------------------------------------------------------------------------------------+
| TAU_CALLPATH_DEPTH     |    2    | Specifies depth of callpath         		     							 |
+------------------------+---------+-------------------------------------------------------------------------------------------------------------+
| TAU_TRACK_IO_PARAMS    |    0    | Setting 1 with ``-optTrackIO``                   							         |
+------------------------+---------+-------------------------------------------------------------------------------------------------------------+
| TAU_SAMPLING	         |    1    | Generates sample based profiles     		     							 |
+------------------------+---------+-------------------------------------------------------------------------------------------------------------+
| TAU_COMM_MATRIX        |    0    | Setting to 1 generates communication matrix	    							 |
+------------------------+---------+-------------------------------------------------------------------------------------------------------------+
| TAU_THROTTLE           |    1    | Setting to 0 turns off throttling, by default removes overhead       					 |
+------------------------+---------+-------------------------------------------------------------------------------------------------------------+
| TAU_THROTTLE_NUMCALLS  | 100000  | Number of calls before testing throttling 								         |
+------------------------+---------+-------------------------------------------------------------------------------------------------------------+
| TAU_THROTTLE_PERCALL   |    10   | If a routine is called more than 100000 times and it takes less than 10 usec of inclusive time, throttle it |
+------------------------+---------+-------------------------------------------------------------------------------------------------------------+
| TAU_COMPENSATE         |    10   | Setting to 1 enables runtime compensation of instrumentation overhead 				         |
+------------------------+---------+-------------------------------------------------------------------------------------------------------------+
| TAU_PROFILE_FORMAT     | Profile | Setting to "merged" generates a single file, "snapshot" generates a snapshot per thread 		         |
+------------------------+---------+-------------------------------------------------------------------------------------------------------------+
| TAU_METRICS            |  TIME   | Setting to a comma separated list (TIME:PAPI_TOT_INS)						         |
+------------------------+---------+-------------------------------------------------------------------------------------------------------------+



Compile-Time Environment Variables
======================================

Environment variables to be used during compilation through the environment variable ``TAU_OPTIONS``

+----------------------------+------------------------------------------------------------------------------+
| Variable                   | Description                                                                  |
+============================+==============================================================================+
| -optVerbose                |    Turn on verbose debugging messages                                        |
+----------------------------+------------------------------------------------------------------------------+
| -optCompInst               |    Use compiler based instrumentation                                        |
+----------------------------+------------------------------------------------------------------------------+
| -optNoCompInst             |    Do not revert to compiler instrumentation if source instrumentation fails |
+----------------------------+------------------------------------------------------------------------------+
| -optTrackIO                |    Wrap POSIX I/O call and calculate vol/bw of I/O operations                |
+----------------------------+------------------------------------------------------------------------------+
| -optKeepFiles              |    Do not remove .pdb and .inst.* files                                      |
+----------------------------+------------------------------------------------------------------------------+
| -optPreProcess             |    Preprocess Fortran sources before instrumentation                         |
+----------------------------+------------------------------------------------------------------------------+
| -optTauSelectFile="<file>" |    Specify selective instrumentation file for tau_instrumentor               |
+----------------------------+------------------------------------------------------------------------------+
| -optTwauWrapFile="<file>"  |    Specify path to link_options.tau generated by tau_gen_wrapper             |
+----------------------------+------------------------------------------------------------------------------+
| -optHeaderInst             |    Enable instrumentation of headers                                         |
+----------------------------+------------------------------------------------------------------------------+
| -optLinking=""             |    Options passed to the linker                                              |
+----------------------------+------------------------------------------------------------------------------+
| -optCompile=""             |    Options passed to the compiler 					    |
+----------------------------+------------------------------------------------------------------------------+
| -optPdtF95Opts=""          |    Add options to the Fortran parser in PDT                                  |
+----------------------------+------------------------------------------------------------------------------+
| -optPdtF95Reset=""         |    Reset options for Fortran parser in PDT                    		    |
+----------------------------+------------------------------------------------------------------------------+
| -optPdtCOpts=""            |    Options for C parser in PDT                                               |
+----------------------------+------------------------------------------------------------------------------+
| -optPdtCXXOpts=""          |    Options for C++ parser in PDT                                             |
+----------------------------+------------------------------------------------------------------------------+
